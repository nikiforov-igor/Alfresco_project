
package ru.it.lecm.mobile.services.documentManager;

import org.alfresco.model.ContentModel;
import org.alfresco.repo.security.authentication.AuthenticationUtil;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.alfresco.service.cmr.repository.StoreRef;
import org.alfresco.service.cmr.search.ResultSet;
import org.alfresco.service.cmr.search.ResultSetRow;
import org.alfresco.service.cmr.search.SearchParameters;
import org.alfresco.service.cmr.search.SearchService;
import org.alfresco.service.namespace.NamespaceService;
import org.alfresco.service.namespace.QName;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.it.lecm.arm.beans.ArmService;
import ru.it.lecm.arm.beans.node.ArmNode;
import ru.it.lecm.base.beans.SearchQueryProcessorService;
import ru.it.lecm.documents.beans.DocumentService;
import ru.it.lecm.errands.ErrandsService;
import ru.it.lecm.mobile.objects.*;

import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.handler.MessageContext;
import java.util.ArrayList;
import java.util.List;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 */
@WebService(name = "WS_DocumentManager",
        targetNamespace = "urn:DefaultNamespace")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
        ObjectFactory.class
})
public class WSDocumentManagerPort implements WSDocumentManager {

    private static final transient Logger log = LoggerFactory.getLogger(WSDocumentManagerPort.class);

    private final static String MOBILE_ARM_CODE = "MOBILE";
    private ObjectFactory objectFactory;
    private DocumentService documentService;
    private NamespaceService namespaceService;
    private ArmService armService;
    private NodeService nodeService;
    private SearchQueryProcessorService processorService;
    private SearchService searchService;

    public WSOEDS getfakesign() {
        return null;
    }

    public WSOCOLLECTION getdiscussionlist(String docid, WSOCONTEXT context) {
        return null;
    }

    public WSOCOLLECTION getroutes(WSOCONTEXT context) {
/*        WSOCOLLECTION routes = objectFactory.createWSOCOLLECTION();
        routes.getDATA().add(objectFactory.createWSOROUTE(QName.createQName("lecm-errands:document", namespaceService)));
        routes.setCOUNT((short) routes.getDATA().size());
        return routes;*/
        return null;
    }

    public String createdocument(WSOROUTE route, WSOCONTEXT context) {
        return null;
    }

    public WSOCOLLECTION getkilldocs(WSOCOLLECTION clientdocs, WSOCONTEXT context) {
        return objectFactory.createWSOCOLLECTION();
    }

    public WSOMDOCUMENT getdocument(String id, boolean includeattachments, WSOCONTEXT context) {
        return null;
    }

    public WSOCOLLECTION getdocumentsex(String deltaunid, WSOCOLLECTION typestatuspairs, boolean ismobject, boolean includeattachments, WSOCONTEXT context) {
        final List<Object> documentTypes = typestatuspairs.getDATA();
        final AuthenticationUtil.RunAsWork<WSOCOLLECTION> runner = new AuthenticationUtil.RunAsWork<WSOCOLLECTION>() {
            @Override
            public WSOCOLLECTION doWork() throws Exception {
                WSOCOLLECTION data = objectFactory.createWSOCOLLECTION();
                for (Object typeObject : documentTypes) {
                    String[] typeStruct = ((String) typeObject).split("\\|");
                    List<QName> types = new ArrayList<>(1);
                    types.add(QName.createQName(typeStruct[2], namespaceService));
                    List<String> statuses = new ArrayList<>(1);
                    statuses.add(typeStruct[1]);

                    String query = getArmQuery(typeStruct[0], typeStruct[1]);
                    if (query != null) {
                        SearchParameters sp = new SearchParameters();
                        sp.addStore(StoreRef.STORE_REF_WORKSPACE_SPACESSTORE);
                        sp.setLanguage(SearchService.LANGUAGE_FTS_ALFRESCO);

                        String processedQuery = processorService.processQuery(query);
                        sp.setQuery(processedQuery);
                        sp.addSort("@" + ContentModel.PROP_NAME, true);

                        ResultSet results = null;
                        try {
                            results = searchService.query(sp);
                            List<NodeRef> documents = results.getNodeRefs();
                            boolean isErrand = true;
                            if (!documents.isEmpty()) {
                                isErrand =  nodeService.getType(documents.get(0)).equals(ErrandsService.TYPE_ERRANDS);
                            }
                            for (NodeRef document : documents) {
                                if (isErrand) {
                                    WSOTASK task = objectFactory.createWSOTASK(document, typeStruct[0], typeStruct[1]);
                                    data.getDATA().add(task);
                                } else {
                                    WSODOCUMENT doc = objectFactory.createWSODOCUMENT(document, typeStruct[0], typeStruct[1]);
                                    data.getDATA().add(doc);
                                }
                            }
                        } finally {
                            if (results != null) {
                                results.close();
                            }
                        }
                    } else {
                        log.warn("Query for request \"" + typeObject + "\" not found");
                    }
                }
                data.setCOUNT((short) data.getDATA().size());
                return data;
            }
        };

        return AuthenticationUtil.runAs(runner,
                context.getUSERID()
        );
    }

    public WSOCOLLECTION getdocuments(String deltaunid, boolean ismobject, boolean includeattachments, WSOCONTEXT context) {
        return null;
    }

    public boolean delegatedoc(String docunid, String personunid, WSOCONTEXT context) {
        return false;
    }

    public WSOITEM getitem() {
        return null;
    }

    public void setObjectFactory(ObjectFactory objectFactory) {
        this.objectFactory = objectFactory;
    }

    public void setDocumentService(DocumentService documentService) {
        this.documentService = documentService;
    }

    public void setNamespaceService(NamespaceService namespaceService) {
        this.namespaceService = namespaceService;
    }

    public void setArmService(ArmService armService) {
        this.armService = armService;
    }

    public void setNodeService(NodeService nodeService) {
        this.nodeService = nodeService;
    }

    private String getArmQuery(String docType, String status) {
        NodeRef arm = armService.getArmByCode(MOBILE_ARM_CODE);
        if (arm != null) {
            List<NodeRef> accordions = armService.getArmAccordions(arm);
            for (NodeRef accordion : accordions) {
                String name = nodeService.getProperty(accordion, ContentModel.PROP_NAME).toString();
                if (docType.equals(name)) {
                    List<NodeRef> nodes = armService.getChildNodes(accordion);
                    List<String> types = armService.getNodeTypes(accordion);
                    String type = null;
                    if (!types.isEmpty()) {
                        type = types.get(0);
                    }
                    for (NodeRef node : nodes) {
                        String statusName = nodeService.getProperty(node, ContentModel.PROP_NAME).toString();
                        if (status.equals(statusName)) {
                            return (type == null ? "" : "TYPE: \"" + type + "\" AND ") + nodeService.getProperty(node, ArmService.PROP_SEARCH_QUERY);
                        }
                    }
                }
            }
        }
        return null;
    }

    private List<String> getNodeTypes(NodeRef node) {
        List<String> nodeTypes = armService.getNodeTypes(node);
        return nodeTypes;
    }

    public void setProcessorService(SearchQueryProcessorService processorService) {
        this.processorService = processorService;
    }

    public void setSearchService(SearchService searchService) {
        this.searchService = searchService;
    }
}