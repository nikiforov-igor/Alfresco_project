package ru.it.lecm.wcalendar;

import java.util.Date;
import java.util.List;
import org.alfresco.service.cmr.repository.NodeRef;

/**
 * API для получения информации о рабочих и выходных днях сотрудника.
 *
 * @see ru.it.lecm.wcalendar.absence.IAbsence
 * @see ru.it.lecm.wcalendar.shedule.IShedule
 * @see ru.it.lecm.wcalendar.calendar.ICalendar
 * @author vlevin
 */
public interface IWorkCalendar {

	/**
	 * Узнать, работает ли сотрудник в указанный день.
	 * Учитывается график работы сотрудника, выходные и рабочие дни
	 * производственного календаря, запланированные отсутствия сотрудника.
	 * Если не настроены графики работы для сотрудника и его вышестоящих
	 * подразделений или отсутствует производственный календарь на интересующую
	 * дату, то гененрируется исключение IllegalArgumentException
	 *
	 * @param node NodeRef на сотрудника.
	 * @param day интересуюшая дата.
	 * @return сотрудник работает в указанную дату - true
	 */
	boolean getEmployeeAvailability(NodeRef node, Date day);

	/**
	 * Получить список рабочих дней сотрудника в указанный период времени.
	 * Учитывается график работы сотрудника, выходные и рабочие дни
	 * производственного календаря, запланированные отсутствия сотрудника.
	 * Если не настроены графики работы для сотрудника и его вышестоящих
	 * подразделений или отсутствует производственный календарь на
	 * интересующуюдату, то гененрируется исключение IllegalArgumentException
	 *
	 * @param node NodeRef на сотрудника.
	 * @param start начало периода, на который надо получить рабочие дни.
	 * @param end конец периода, на который надо получить рабочие дни.
	 * @return список дат рабочих дней сотрудника.
	 */
	List<Date> getEmployeeWorkindDays(NodeRef node, Date start, Date end);

	/**
	 * Получить список выходных дней сотрудника в указанный период времени.
	 * Учитывается график работы сотрудника, выходные и рабочие дни
	 * производственного календаря, запланированные отсутствия сотрудника.
	 * Если не настроены графики работы для сотрудника и его вышестоящих
	 * подразделений или отсутствует производственный календарь на интересующую
	 * дату, то гененрируется исключение IllegalArgumentException
	 *
	 * @param node NodeRef на сотрудника.
	 * @param start начало периода, на который надо получить выходные дни.
	 * @param end конец периода, на который надо получить выходные дни.
	 * @return список дат выходных дней сотрудника.
	 */
	List<Date> getEmployeeNonWorkindDays(NodeRef node, Date start, Date end);

	/**
	 * Получить количество рабочих дней сотрудника в указанный период времени.
	 * Учитывается график работы сотрудника, выходные и рабочие дни
	 * производственного календаря, запланированные отсутствия сотрудника.
	 * Если не настроены графики работы для сотрудника и его вышестоящих
	 * подразделений или отсутствует производственный календарь на интересующую
	 * дату, то гененрируется исключение IllegalArgumentException
	 *
	 * @param node NodeRef на сотрудника.
	 * @param start начало периода, на который надо получить рабочие дни.
	 * @param end конец периода, на который надо получить рабочие дни.
	 * @return количество рабочих дней сотрудника.
	 */
	int getEmployeeWorkingDaysNumber(NodeRef node, Date start, Date end);

	/**
	 * Получить плановую дату выполнения сотрудником задачи.
	 * Учитывается график работы сотрудника, выходные и рабочие дни
	 * производственного календаря, запланированные отсутствия сотрудника.
	 * Если не настроены графики работы для сотрудника и его вышестоящих
	 * подразделений или отсутствует производственный календарь на интересующую
	 * дату, то гененрируется исключение IllegalArgumentException
	 *
	 * @param node NodeRef на сотрудника.
	 * @param start начало выполнения задачи.
	 * @param workingDaysRequired количество рабочих дней, необходимых для
	 * выполнения задачи.
	 * @return плановая дата выполнения задачи.
	 */
	Date getPlannedJobFinish(NodeRef node, Date start, int workingDaysRequired);
}
