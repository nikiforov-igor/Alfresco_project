<?xml version='1.0' encoding='UTF-8'?>
<items>
    <item name="cm:Принудительно согласовать" type="lecm-group-actions:script-action">
        <property name="cm:name"><![CDATA[Принудительно согласовать]]></property>
        <property name="lecm-group-actions:statuses"><![CDATA[На согласовании]]></property>
        <property name="lecm-group-actions:type">
            <![CDATA[[lecm-contract:document, lecm-internal:document, lecm-additional-document:additionalDocument, lecm-outgoing:document, lecm-ord:document, lecm-nd:document, lecm-protocol:document]]]></property>
        <property name="lecm-group-actions:order"><![CDATA[0]]></property>
        <property name="lecm-group-actions:expression">
            <![CDATA[(!doc.type().equals("lecm-contract:document") AND !doc.type().equals("lecm-protocol:document") AND !doc.type().equals("lecm-additional-document:additionalDocument")) OR (doc.type().equals("lecm-protocol:document") AND user.currentUser().getEmployee().toString().equals(doc.attr("lecm-document:author-assoc-ref"))) OR ((doc.type().equals("lecm-contract:document") OR doc.type().equals("lecm-additional-document:additionalDocument") ) AND user.currentUser().hasBusinessRole('CONTRACT_CURATOR'))]]></property>
        <property name="lecm-group-actions:availableForReader"><![CDATA[false]]></property>
        <property name="lecm-group-actions:isGroup"><![CDATA[false]]></property>
        <property name="lecm-group-actions:forCollection"><![CDATA[false]]></property>
        <property name="cm:title"><![CDATA[Принудительно согласовать]]></property>
        <property name="lecm-group-actions:script"><![CDATA[(function() {
	/* получение nodeRef-ы на текущую итерацию */
    var currentIteration = routesService.getDocumentCurrentIteration(document);
  
    if (currentIteration) {
      var stages = currentIteration.getChildAssocsByType('lecmWorkflowRoutes:stage');
      for (i = 0, size = stages.length; i < size; ++i) {
        state = '' + stages[i].properties['lecmApproveAspects:approvalState'];
        if ('NEW' == state || 'ACTIVE' == state) {
          var items = stages[i].getChildAssocsByType('lecmWorkflowRoutes:stageItem');
          var hasItems = (items && items.length);
          if (hasItems) { /*"Отменен" - только если айтемы, иначе - "Пропущен"*/
          	stages[i].properties['lecmApproveAspects:approvalComment'] = reason;
          	stages[i].properties['lecmApproveAspects:hasComment'] = (reason !== null && reason.length > 0);
          	stages[i].save();  
          }
        }
      }

      statemachine.terminateWorkflowsByDefinition(document, 'lecmApprovementWorkflow', 'forcedDecision', 'APPROVED_FORCED');
    }

})();]]></property>
        <items>
            <item name="cm:Причина" type="lecm-group-actions:form-field">
                <property name="cm:name"><![CDATA[Причина]]></property>
                <property name="lecm-group-actions:field-default-value"><![CDATA[]]></property>
                <property name="lecm-group-actions:field-id"><![CDATA[reason]]></property>
                <property name="lecm-group-actions:field-is-mandatory"><![CDATA[false]]></property>
                <property name="lecm-group-actions:field-type"><![CDATA[approvalReason]]></property>
                <property name="lecm-group-actions:field-priority"><![CDATA[0]]></property>
            </item>
        </items>
    </item>
</items>