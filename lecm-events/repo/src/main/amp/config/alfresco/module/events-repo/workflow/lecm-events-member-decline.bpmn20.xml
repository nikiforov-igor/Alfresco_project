<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.it.ru/logicECM/events/workflow/memberDecline/1.0">
    <process id="eventsMemberDecline" name="Мероприятия: Отклонить приглашение">
        <startEvent id="startMemberDecline" name="Start" activiti:formKey="lecmEventsWf:memberDecline"></startEvent>
        <endEvent id="endMemberDecline" name="End"></endEvent>
        <scriptTask id="memberDecline" name="Member Decline" scriptFormat="javascript">
            <extensionElements>
                <activiti:executionListener event="start" class="org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener">
                    <activiti:field name="script">
                        <activiti:string><![CDATA[
                            var document = bpm_package.children[0];
                            if (document != null) {
                                var memberRow = events.getCurrentEmployeeEventMemberRow(document);
                                if (memberRow != null) {
                                    memberRow.properties["lecm-events-ts:members-status"] = "DECLINED";
                                    memberRow.properties["lecm-events-ts:members-decline-reason"] = lecmEventsWf_memberDeclineReason;
                                    memberRow.save();
                                }

                                var repeatableEvents = events.getRepetableEvents(document, "ALL");
                                if (repeatableEvents != null) {
                                    for (var i = 0; i < repeatableEvents.length; i++) {
                                        memberRow = events.getCurrentEmployeeEventMemberRow(repeatableEvents[i]);
                                        if (memberRow != null) {
                                            memberRow.properties["lecm-events-ts:members-status"] = "DECLINED";
                                            memberRow.properties["lecm-events-ts:members-decline-reason"] = lecmEventsWf_memberDeclineReason;
                                            memberRow.save();
                                        }
                                    }
                                }

                                var currentEmployee = orgstructure.getCurrentEmployee();
                                var initiator = document.assocs["lecm-events:initiator-assoc"][0];

                                if (currentEmployee != null && initiator != null) {
                                    notifications.sendNotificationFromCurrentUser({
                                        recipients: [initiator],
                                        templateCode: 'EVENTS.INVITATION_DECLINE',
                                        templateConfig: {
                                            mainObject: document,
                                            eventExecutor: currentEmployee
                                        }
                                    });
                                }
                            }
                        ]]></activiti:string>
                    </activiti:field>
					<activiti:field name="runAs">
						<activiti:string><![CDATA[workflow]]></activiti:string>
					</activiti:field>
                </activiti:executionListener>
            </extensionElements>
            <script>var test=1;</script>
        </scriptTask>
        <receiveTask id="eventsReceiveTask" name="Receive Task"></receiveTask>
        <sequenceFlow id="flow1" name="" sourceRef="startMemberDecline" targetRef="memberDecline"></sequenceFlow>
        <sequenceFlow id="flow2" name="" sourceRef="memberDecline" targetRef="eventsReceiveTask"></sequenceFlow>
        <sequenceFlow id="flow3" name="" sourceRef="eventsReceiveTask" targetRef="endMemberDecline"></sequenceFlow>
    </process>
</definitions>