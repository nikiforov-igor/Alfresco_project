<?xml version='1.0' encoding='UTF-8'?>
<items updateMode="CreateOrUpdate">
    <item name="cm:Создать протокол" type="lecm-group-actions:script-action">
        <property name="cm:name"><![CDATA[Создать протокол]]></property>
        <property name="lecm-group-actions:statuses"><![CDATA[Проведено]]></property>
        <property name="lecm-group-actions:type"><![CDATA[[lecm-meetings:document]]]></property>
        <property name="lecm-group-actions:order"><![CDATA[0]]></property>
        <property name="lecm-group-actions:expression">
            <![CDATA[(user.currentUser().getEmployee().toString().equals(doc.attr("lecm-meetings:secretary-assoc-ref")) OR user.currentUser().getEmployee().toString().equals(doc.attr("lecm-meetings:chairman-assoc-ref")) OR user.currentUser().getEmployee().toString().equals(doc.attr("lecm-document:author-assoc-ref")) OR user.currentUser().getEmployee().toString().equals(doc.attr("lecm-events:initiator-assoc-ref")))
                        AND (user.currentUser().hasBusinessRole("DA_ENGINEER") OR user.currentUser().hasBusinessRole("MEETINGS_CREATOR"))]]></property>
        <property name="lecm-group-actions:isGroup"><![CDATA[false]]></property>
        <property name="lecm-group-actions:forCollection"><![CDATA[false]]></property>
        <property name="cm:title"><![CDATA[]]></property>
        <property name="lecm-group-actions:script"><![CDATA[var draftRootFolder = protocolService.getDraftRoot();
if (draftRootFolder) {
  var props = [];
  props['lecm-document:title'] = document.properties["lecm-events:title"];
  props['lecm-eds-document:summaryContent'] = document.properties["lecm-events:description"];
  var protocol = draftRootFolder.createNode(null, "lecm-protocol:document", props);

  documentConnection.createConnection(document, protocol, "onBasis", true, true);

  var holdingMembersAssoc = document.assocs["lecm-meetings:holding-members-assoc"];
  if (holdingMembersAssoc) {
    for (var i = 0; i < holdingMembersAssoc.length; i++) {
      protocol.createAssociation(holdingMembersAssoc[i], "lecm-protocol:signers-assoc");
      protocol.createAssociation(holdingMembersAssoc[i], "lecm-protocol:attended-assoc");
    }
  }

  var chairmanAssoc = document.assocs["lecm-meetings:chairman-assoc"];
  if (chairmanAssoc) {
    for (var i = 0; i < chairmanAssoc.length; i++) {
      protocol.createAssociation(chairmanAssoc[i], "lecm-protocol:meeting-chairman-assoc");
    }
  }

  var secretaryAssoc = document.assocs["lecm-meetings:secretary-assoc"];
  if (secretaryAssoc) {
    for (var i = 0; i < secretaryAssoc.length; i++) {
      protocol.createAssociation(secretaryAssoc[i], "lecm-protocol:secretary-assoc");
    }
  }

  var subjectAssoc = document.assocs["lecm-events:subject-assoc"];
  if (subjectAssoc) {
    for (var i = 0; i < subjectAssoc.length; i++) {
      protocol.createAssociation(subjectAssoc[i], "lecm-document:subject-assoc");
    }
  }

  var types = search.xpathSearch("/app:company_home/cm:Business_x0020_platform/cm:LECM/cm:Сервис_x0020_Справочники/lecm-dic:Вид_x0020_документа/cm:Вид_x0020_протокола/cm:Протокол_x0020_совещания");
  if (types.length) {
    protocol.createAssociation(types[0], "lecm-eds-document:document-type-assoc");
  }

  var holdingItems = meetings.getMeetingHoldingItems(document.nodeRef.toString());
  if (holdingItems && holdingItems.length) {
    var pointsRootFolder = businessPlatform.getUserTemp();

    for (var i = 0; i < holdingItems.length; i++) {
      var item = holdingItems[i];
      var properties = [];
      properties["lecm-document:indexTableRow"] = item.properties["lecm-document:indexTableRow"];
      properties["lecm-protocol-ts:point-formulation"] = item.properties["lecm-meetings-ts:holding-item-name"];
      properties["lecm-protocol-ts:point-desc"] = item.properties["lecm-meetings-ts:holding-listen"];
      properties["lecm-protocol-ts:men-spoke"] = item.properties["lecm-meetings-ts:holding-speak"];
      properties["lecm-protocol-ts:decision"] = item.properties["lecm-meetings-ts:holding-agreed"];
      var createdPoint = pointsRootFolder.createNode(null, "lecm-protocol-ts:point", properties);

      var reporterAssoc = item.assocs["lecm-meetings-ts:holding-reporter-assoc"];
      if (reporterAssoc && reporterAssoc.length == 1) {
        createdPoint.createAssociation(reporterAssoc[0], "lecm-protocol-ts:reporter-assoc");
      }

      protocol.createAssociation(createdPoint, "lecm-protocol:temp-items-assoc");
    }
  }

  model.redirect = 'document?nodeRef=' + protocol.nodeRef;
  model.postRedirect = false;
}]]></property>
    </item>
</items>
