<?xml version='1.0' encoding='UTF-8'?>
<items>
    <item name="cm:Копировать мероприятие" type="lecm-group-actions:script-action">
        <property name="cm:name"><![CDATA[Копировать мероприятие]]></property>
        <property name="cm:title"><![CDATA[Копировать мероприятие]]></property>
        <property name="lecm-group-actions:statuses"><![CDATA[]]></property>
        <property name="lecm-group-actions:type"><![CDATA[[lecm-events:document]]]></property>
        <property name="lecm-group-actions:order"><![CDATA[0]]></property>
        <property name="lecm-group-actions:expression"><![CDATA[user.isAutor()]]></property>
        <property name="lecm-group-actions:isGroup"><![CDATA[false]]></property>
        <property name="lecm-group-actions:forCollection"><![CDATA[false]]></property>
        <property name="lecm-group-actions:script"><![CDATA[if (document != null) {
    var params = 'documentType=lecm-events:document';

    // Заголовок
    var value = document.properties["lecm-events:title"];
    if (value != null) {
        params += "&prop_lecm-events_title=" + value;
    }
    // Весмь день
    value = document.properties["lecm-events:all-day"];
    if (value != null) {
        params += "&prop_lecm-events_all-day=" + value;
    }
    // Дата начала мероприятия
    value = document.properties["lecm-events:from-date"];
    if (value != null) {
        params += "&prop_lecm-events_from-date=" + utils.toISO8601(value);
    }
    // Дата окончания мероприятия
    value = document.properties["lecm-events:to-date"];
    if (value != null) {
        params += "&prop_lecm-events_to-date=" + utils.toISO8601(value);
    }
    // Повторное
    value = document.properties["lecm-events:repeatable"];
    if (value != null) {
        params += "&prop_lecm-events_repeatable=" + value;
    }
    // Дата начала периода
    value = document.properties["lecm-events:repeatable-start-period"];
    if (value != null) {
        params += "&prop_lecm-events_repeatable-start-period=" +  utils.toISO8601(value);
    }
    // Дата окончания периода -->
    value = document.properties["lecm-events:repeatable-end-period"];
    if (value != null) {
        params += "&prop_lecm-events_repeatable-end-period=" +  utils.toISO8601(value);
    }
    // Правила
    value = document.properties["lecm-events:repeatable-rule"];
    if (value != null) {
        params += "&prop_lecm-events_repeatable-rule=" + value;
    }

    // Участники
    var value = createAssocValue(events.getEventMembers(document));
    if (value !== "") {
        params += "&assoc_lecm-events_temp-members-assoc=" + value;
    }

    //Приглашённые
    var value = createAssocValue(events.getEventInvitedMembers(document));
    if (value !== "") {
        params += "&assoc_lecm-events_invited-members-assoc=" + value;
    }

    // Место проведения
    value = createAssocValue(document.assocs["lecm-events:location-assoc"]);
    if (value !== "") {
        params += "&assoc_lecm-events_location-assoc=" + value;
    }

    // Ресурсы
    var value = createAssocValue(events.getEventResources(document));
    if (value !== "") {
        params += "&assoc_lecm-events_temp-resources-assoc=" + value;
    }

    // Инициатор
    value = createAssocValue(document.assocs["lecm-events:initiator-assoc"]);
    if (value !== "") {
        params += "&assoc_lecm-events_initiator-assoc=" + value;
    }

    // Описание
    value = document.properties["lecm-events:description"];
    if (value != null) {
        params += "&prop_lecm-events_description=" + value;
    }

    // Тематика
    value = createAssocValue(document.assocs["lecm-events:subject-assoc"]);
    if (value !== "") {
        params += "&assoc_lecm-events_subject-assoc=" + value;
    }

    var encodeParams = Packages.org.apache.commons.codec.binary.Base64.encodeBase64String(new java.lang.String(params).getBytes());
    model.redirect = 'document-create?documentType=lecm-events:document&p1=' + encodeURIComponent(encodeParams) + '&p2=' + encodeURIComponent(hashCode(params));
}

function hashCode(str) {
    var hash = 0, i, chr, len;
    if (str.length == 0) return hash;
    for (i = 0, len = str.length; i < len; i++) {
        chr   = str.charCodeAt(i);
        hash  = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}

function createAssocValue(assocs) {
    var result = "";
    if (assocs != null && assocs.length > 0) {
        for each (var assoc in assocs) {
            result += assoc.nodeRef.toString() + ",";
        }
        result = result.substring(0, result.length - 1);
    }
    return result;
}]]></property>
    </item>
</items>