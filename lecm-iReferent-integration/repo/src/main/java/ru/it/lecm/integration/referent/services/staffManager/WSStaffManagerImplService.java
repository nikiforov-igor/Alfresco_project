
package ru.it.lecm.integration.referent.services.staffManager;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "WSStaffManagerImplService", targetNamespace = "urn:DefaultNamespace", wsdlLocation = "http://193.232.107.133:8080/IReferentServices/WSBR_StaffManager?wsdl")
public class WSStaffManagerImplService
    extends Service
{

    private final static URL WSSTAFFMANAGERIMPLSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(WSStaffManagerImplService.class.getName());

    static {
        URL url = null;
        try {
            url = new URL("file:WSBR_StaffManager.wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Can not initialize the default wsdl from file:WSBR_StaffManager?wsdl");
            logger.warning(e.getMessage());
        }
        WSSTAFFMANAGERIMPLSERVICE_WSDL_LOCATION = url;
    }

    public WSStaffManagerImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WSStaffManagerImplService() {
        super(WSSTAFFMANAGERIMPLSERVICE_WSDL_LOCATION, new QName("urn:DefaultNamespace", "WSStaffManagerImplService"));
    }

    /**
     * 
     * @return
     *     returns WSStaffManager
     */
    @WebEndpoint(name = "WS_StaffManagerPort")
    public WSStaffManager getWSStaffManagerPort() {
        return super.getPort(new QName("urn:DefaultNamespace", "WS_StaffManagerPort"), WSStaffManager.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSStaffManager
     */
    @WebEndpoint(name = "WS_StaffManagerPort")
    public WSStaffManager getWSStaffManagerPort(WebServiceFeature... features) {
        return super.getPort(new QName("urn:DefaultNamespace", "WS_StaffManagerPort"), WSStaffManager.class, features);
    }

}
