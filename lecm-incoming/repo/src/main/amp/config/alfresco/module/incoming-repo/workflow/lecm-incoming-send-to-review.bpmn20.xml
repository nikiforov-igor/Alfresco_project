<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.it.ru/logicECM/incoming/workflow/sendToReview/1.0">
	<process id="incomingSendToReview" name="Входящие: направить на рассмотрение">
		<startEvent id="startSendToReview" name="Start" activiti:formKey="lecmIncomingWf:sendToReview"></startEvent>
		<endEvent id="endSendToReview" name="End"></endEvent>
		<scriptTask id="sendToReview" name="Send to review" scriptFormat="javascript">
			<extensionElements>
				<activiti:executionListener event="start" class="org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener">
					<activiti:field name="script">
						<activiti:string><![CDATA[
							function checkReviewerExist(recipientRef){
									var exist = false;
									if (existReviewersAssocs && existReviewersAssocs.length){
										existReviewersAssocs = existReviewersAssocs.filter(function(element, index, array){
											if(element.nodeRef.equals(recipientRef)){
												exist = true;
												return false;
											}
											return true;
										});
									}
									return exist;
							}
							var document = bpm_package.children[0];
							var currentEmployee = orgstructure.getCurrentEmployee();
							var comment = "" + bpm_comment;
							comment = (comment && comment != "null") ? comment : "Комментариев нет";
							if (document != null) {
								var existReviewersAssocs = document.assocs["lecm-eds-document:reviewers-assoc"];
								var recipient = execution.getVariable("lecmIncomingWf_sendToReviewRecipient");
								if (recipient) {
								 	if (recipient.typeShort == "lecm-orgstr:employee") {
								 		if (!checkReviewerExist(recipient.nodeRef)){
											statemachine.grandDynamicRoleForEmployee(document, recipient, "INCOMING_REVIEWER_DYN");
											statemachine.grandDynamicRoleForEmployee(document, recipient, "INCOMING_ALREADY_REVIEWED_DYN");
											document.createAssociation(recipient, "lecm-eds-document:reviewers-assoc");


											notifications.sendNotificationFromCurrentUser({
												recipients: [recipient],
												templateCode: 'INCOMING_REVIEW',
												templateConfig: {
													mainObject: document,
													sender: currentEmployee,
													comment: comment
												},
												dontCheckAccessToObject: true
											});

											var logObjects = [];
											logObjects.push("" + recipient.nodeRef);
											logObjects.push(comment);
											var logText = "#initiator направил(а) документ " + documentScript.wrapperDocumentLink(document, "№ {~REGNUM} от {~REGDATE}") + " на рассмотрение #object1.";
											logText += " " + base.wrapperTitle("Комментарий", "#object2") + ".";
											logText = substitude.formatNodeTitle(document.nodeRef.toString(), logText);
											businessJournal.log(document.nodeRef.toString(), "DIRECT_DOCUMENT", logText, logObjects);
										}
								    } else if (recipient.typeShort == "lecm-orgstr:organization-unit") {
								    	var recipients = [];

								    	var allEmployeeInUnit = orgstructure.getEmployeesInUnit(recipient);
								    	if (allEmployeeInUnit != null) {
								    	    for (var i = 0; i < allEmployeeInUnit.length; i++) {
								    	        var employee = allEmployeeInUnit[i];
								            	if (orgstructure.hasBusinessRole(employee, "INCOMING_REVIEWERS_IN_UNIT")) {
								                	recipients.push(employee);
								            	}
								    	    }
								    	}

                                        if (recipients.length == 0) {
                                            var boss = orgstructure.findUnitBoss(recipient.nodeRef.toString());
                                            if (boss != null) {
								                recipients.push(boss);
                                            }
                                        }

								    	if (recipients.length > 0) {

											for (var i = 0; i < recipients.length; i++) {
												if(checkReviewerExist(recipients[i].nodeRef)){
													recipients.splice(i,1);
												}
											}
								    	    for (var i = 0; i < recipients.length; i++) {
												statemachine.grandDynamicRoleForEmployee(document, recipients[i], "INCOMING_REVIEWER_DYN");
												document.createAssociation(recipients[i], "lecm-eds-document:reviewers-assoc");
								    	    }

											notifications.sendNotificationFromCurrentUser({
												recipients: recipients,
												templateCode: 'INCOMING_REVIEW',
												templateConfig: {
													mainObject: document,
													sender: currentEmployee,
													comment: comment
												},
												dontCheckAccessToObject: true
											});
								    	}

								    	var logObjects = [];
				                        logObjects.push("" + recipient.nodeRef);
				                        logObjects.push(comment);
				                        var logText = "#initiator направил(а) документ " + documentScript.wrapperDocumentLink(document, "№ {~REGNUM} от {~REGDATE}") + " на рассмотрение в подразделение #object1.";
										logText += " " + base.wrapperTitle("Комментарий", "#object2") + ".";
                                        logText = substitude.formatNodeTitle(document.nodeRef.toString(), logText);
				                        businessJournal.log(document.nodeRef.toString(), "DIRECT_DOCUMENT", logText, logObjects);
								    }
								} else {
									var recipients = orgstructure.getEmployeesByBusinessRoleId("INCOMING_REVIEWERS", true);

									if (recipients && recipients.length) {
										for (var i = 0; i < recipients.length; i++) {
											if(checkReviewerExist(recipients[i].nodeRef)){
												recipients.splice(i,1);
											}
										}
							            for (var i = 0; i < recipients.length; i++) {
											statemachine.grandDynamicRoleForEmployee(document, recipients[i], "INCOMING_REVIEWER_DYN");
											document.createAssociation(recipients[i], "lecm-eds-document:reviewers-assoc");
							            }

								    	notifications.sendNotificationFromCurrentUser({
											recipients: recipients,
											templateCode: 'INCOMING_REVIEW',
											templateConfig: {
												mainObject: document,
												sender: currentEmployee,
												comment: comment
											},
											dontCheckAccessToObject: true
										});
							        }

			                        var logObjects = [];
									logObjects.push(comment);
				                    var logText = "#initiator направил(а) документ " + documentScript.wrapperDocumentLink(document, "№ {~REGNUM} от {~REGDATE}") + " на рассмотрение рассматривающим.";
									logText += " " + base.wrapperTitle("Комментарий", "#object1") + ".";
									logText = substitude.formatNodeTitle(document.nodeRef.toString(), logText);
				                    businessJournal.log(document.nodeRef.toString(), "DIRECT_DOCUMENT", logText, logObjects);
								}
								if (existReviewersAssocs && existReviewersAssocs.length) {
									for (var i = 0; i < existReviewersAssocs.length; i++) {
								        lecmPermission.revokeDynamicRole(document, existReviewersAssocs[i], "INCOMING_REVIEWER_DYN");
								        document.removeAssociation(existReviewersAssocs[i], "lecm-eds-document:reviewers-assoc");
									}
								}
							}
						]]></activiti:string>
					</activiti:field>
				</activiti:executionListener>
			</extensionElements>
			<script></script>
		</scriptTask>
		<receiveTask id="incomingReceiveTask" name="Receive Task"></receiveTask>
		<sequenceFlow id="flow1" name="" sourceRef="startSendToReview" targetRef="sendToReview"></sequenceFlow>
		<sequenceFlow id="flow2" name="" sourceRef="sendToReview" targetRef="incomingReceiveTask"></sequenceFlow>
		<sequenceFlow id="flow3" name="" sourceRef="incomingReceiveTask" targetRef="endSendToReview"></sequenceFlow>
	</process>
</definitions>
