<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.it.ru/logicECM/errands/workflow/changeCoexecutors/1.0">
    <process id="errandsChangeCoexecutors" name="Изменить состав соисполнителей">
        <startEvent id="startChangeCoexecutors" name="Start" activiti:formKey="lecmErrandWf:changeCoexecutors"></startEvent>
        <endEvent id="endChangeCoexecutors" name="End"></endEvent>
        <scriptTask id="changeCoexecutors" name="Change Executor" scriptFormat="javascript">
            <extensionElements>
                <activiti:executionListener event="start" class="org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener">
                    <activiti:field name="script">
                        <activiti:string><![CDATA[
	                        var document = bpm_package.children[0];
	                        if (document) {
                                var currentUser =  orgstructure.getCurrentEmployee();
                                var newCoexecutors = [];
                                if (execution.getVariable("lecmErrandWf_changeCoexecutorsNewCoexecutors") && lecmErrandWf_changeCoexecutorsNewCoexecutors.size()) {
                                	for (var i = 0; i < lecmErrandWf_changeCoexecutorsNewCoexecutors.size(); i++){
                                		newCoexecutors.push(lecmErrandWf_changeCoexecutorsNewCoexecutors.get(i));
									}
                                }
								var oldCoexecutors = document.assocs["lecm-errands:coexecutors-assoc"];
								var finalNewCoexecutors = [];
								var removedExecutors = [];

								if (newCoexecutors && newCoexecutors.length){
									if(oldCoexecutors && oldCoexecutors.length){
											finalNewCoexecutors = newCoexecutors.filter(function(element){
												for (var i = 0; i < oldCoexecutors.length; i++) {
													if(element.nodeRef.equals(oldCoexecutors[i].nodeRef)){
														return false;
													}
												}
												return true;
											});
											removedExecutors = oldCoexecutors.filter(function(element){
												for (var i = 0; i < newCoexecutors.length; i++) {
													if(element.nodeRef.equals(newCoexecutors[i].nodeRef)){
														return false;
													}
												}
												return true;
											});
									} else {
										finalNewCoexecutors = newCoexecutors;
									}
								} else {
									if(oldCoexecutors && oldCoexecutors.length){
										removedExecutors = oldCoexecutors;
									}
								}

		                        if (finalNewCoexecutors.length || removedExecutors.length) {
									if (finalNewCoexecutors.length) {
										finalNewCoexecutors.forEach(function(coexecutor){
											document.createAssociation(coexecutor, "lecm-errands:coexecutors-assoc");
											statemachine.grandDynamicRoleForEmployee(document, coexecutor, "ERRANDS_COEXECUTOR");

										});
										notifications.sendNotificationFromCurrentUser({
												recipients: finalNewCoexecutors,
												templateCode: 'ERRANDS_CO_EXECUTOR',
												templateConfig: {
													mainObject: document,
													eventExecutor: currentUser
												}
											});
									}
									if (removedExecutors.length) {
										removedExecutors.forEach(function(coexecutor){
											document.removeAssociation(coexecutor, "lecm-errands:coexecutors-assoc");
											lecmPermission.revokeDynamicRole(document, coexecutor, "ERRANDS_COEXECUTOR");
										});
										notifications.sendNotificationFromCurrentUser({
												recipients: removedExecutors,
												templateCode: 'ERRANDS_CO_EXECUTOR_REMOVE',
												templateConfig: {
													mainObject: document,
													eventExecutor: currentUser
												}
											});
									}

			                        var logObjects = [];
								 	newCoexecutors.forEach(function (coexecutor) {
    									logObjects.push("" + coexecutor.nodeRef);
									});
			                        var logText = "#initiator изменил состав соисполнителей на: "
			                        for(var i = 1; i < newCoexecutors.length + 1; i++){
			                        	logText += "#object" + i;
			                        	logText += (i < newCoexecutors.length) ? ", " : "";
			                        }
			                        businessJournal.log(document.nodeRef.toString(), "ERRAND_CHANGE_COEXECUTORS", logText, logObjects);
		                        }
	                        }
                        ]]></activiti:string>
                    </activiti:field>
                </activiti:executionListener>
            </extensionElements>
            <script></script>
        </scriptTask>
        <receiveTask id="errandReceiveTask" name="Receive Task"></receiveTask>
        <sequenceFlow id="flow1" name="" sourceRef="startChangeCoexecutors" targetRef="changeCoexecutors"></sequenceFlow>
        <sequenceFlow id="flow2" name="" sourceRef="changeCoexecutors" targetRef="errandReceiveTask"></sequenceFlow>
        <sequenceFlow id="flow3" name="" sourceRef="errandReceiveTask" targetRef="endChangeCoexecutors"></sequenceFlow>
    </process>
</definitions>