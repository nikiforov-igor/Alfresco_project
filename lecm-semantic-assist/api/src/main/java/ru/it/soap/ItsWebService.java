package ru.it.soap;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.5
 * 2013-06-17T15:41:37.631+06:00
 * Generated source version: 2.7.5
 *
 */
@WebServiceClient(name = "ItsWebService",
                  wsdlLocation = "http://172.16.125.4:4466/?wsdl",
                  targetNamespace = "http://it.ru/")
public class ItsWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://it.ru/", "ItsWebService");
    public final static QName ItsWebServiceSoap12 = new QName("http://it.ru/", "ItsWebServiceSoap12");
    public final static QName ItsWebServiceSoap = new QName("http://it.ru/", "ItsWebServiceSoap");
    public final static QName ItsWebServiceHttpPost = new QName("http://it.ru/", "ItsWebServiceHttpPost");
    public final static QName ItsWebServiceHttpGet = new QName("http://it.ru/", "ItsWebServiceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://172.16.125.4:4466/?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ItsWebService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://172.16.125.4:4466/?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ItsWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ItsWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ItsWebService() {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ItsWebService(WebServiceFeature ... features) {
//        super(WSDL_LOCATION, SERVICE, features);
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ItsWebService(URL wsdlLocation, WebServiceFeature ... features) {
//        super(wsdlLocation, SERVICE, features);
        super(wsdlLocation, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ItsWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
//        super(wsdlLocation, serviceName, features);
        super(wsdlLocation, serviceName);
    }

    /**
     *
     * @return
     *     returns ItsWebServiceSoap
     */
    @WebEndpoint(name = "ItsWebServiceSoap12")
    public ItsWebServiceSoap getItsWebServiceSoap12() {
        return super.getPort(ItsWebServiceSoap12, ItsWebServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ItsWebServiceSoap
     */
    @WebEndpoint(name = "ItsWebServiceSoap12")
    public ItsWebServiceSoap getItsWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(ItsWebServiceSoap12, ItsWebServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns ItsWebServiceSoap
     */
    @WebEndpoint(name = "ItsWebServiceSoap")
    public ItsWebServiceSoap getItsWebServiceSoap() {
        return super.getPort(ItsWebServiceSoap, ItsWebServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ItsWebServiceSoap
     */
    @WebEndpoint(name = "ItsWebServiceSoap")
    public ItsWebServiceSoap getItsWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(ItsWebServiceSoap, ItsWebServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns ItsWebServiceHttpPost
     */
    @WebEndpoint(name = "ItsWebServiceHttpPost")
    public ItsWebServiceHttpPost getItsWebServiceHttpPost() {
        return super.getPort(ItsWebServiceHttpPost, ItsWebServiceHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ItsWebServiceHttpPost
     */
    @WebEndpoint(name = "ItsWebServiceHttpPost")
    public ItsWebServiceHttpPost getItsWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(ItsWebServiceHttpPost, ItsWebServiceHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns ItsWebServiceHttpGet
     */
    @WebEndpoint(name = "ItsWebServiceHttpGet")
    public ItsWebServiceHttpGet getItsWebServiceHttpGet() {
        return super.getPort(ItsWebServiceHttpGet, ItsWebServiceHttpGet.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ItsWebServiceHttpGet
     */
    @WebEndpoint(name = "ItsWebServiceHttpGet")
    public ItsWebServiceHttpGet getItsWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(ItsWebServiceHttpGet, ItsWebServiceHttpGet.class, features);
    }

}
