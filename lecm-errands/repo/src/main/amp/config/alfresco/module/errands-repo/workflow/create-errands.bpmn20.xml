<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.it.ru/logicECM/fms/errands/workflow/controllercreateErrands/1.0">
    <process id="createErrands" name="Создание поручений">
        <startEvent id="startCreateErrands" name="Start" activiti:formKey="lecmErrandWf:createErrands"></startEvent>
        <endEvent id="endCreateErrands" name="End"></endEvent>
        <scriptTask id="createErrandsTask" name="Controller createErrands" scriptFormat="javascript">
            <extensionElements>
                <activiti:executionListener event="start" class="org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener">
                    <activiti:field name="script">
                        <activiti:string>
                            <![CDATA[
	                        for each (var doc in bpm_package.children) {
                                var properties = []
                                <!-- lecmErrandWf:isImportant lecm-errands:is-important -->
                                var value = lecmErrandWf_isImportant;
                                if (value != null) {
                                    properties["lecm-errands:is-important"] = value;
                                }

                                <!-- lecmErrandWf:title lecm-errands:title -->
                                value = lecmErrandWf_title;
                                if (value != null) {
                                    properties["lecm-errands:title"] = value;
                                }

                                <!-- lecmErrandWf:content lecm-errands:content -->
                                value = lecmErrandWf_content;
                                if (value != null) {
                                    properties["lecm-errands:content"] = value;
                                }

                                <!-- lecmErrandWf:limitationDate lecm-errands:limitation-date -->
                                value = lecmErrandWf_limitationDate;
                                if (value != null) {
                                    properties["lecm-errands:limitation-date"] = value;
                                }

                                <!-- lecmErrandWf:withoutInitiatorApproval lecm-errands:without-initiator-approval -->
                                value = lecmErrandWf_withoutInitiatorApproval;
                                if (value != null) {
                                    properties["lecm-errands:without-initiator-approval"] = value;
                                }

                                <!-- lecmErrandWf_startDate lecm-errands:start-date -->
                                value = lecmErrandWf_startDate;
                                if (value != null) {
                                    properties["lecm-errands:start-date"] = value;
                                }

                                <!-- lecmErrandWf_justInTime lecm-errands:just-in-time -->
                                value = lecmErrandWf_justInTime;
                                if (value != null) {
                                    properties["lecm-errands:just-in-time"] = value;
                                }

                                var errand = documentScript.getDraftRoot("lecm-errands:document").createNode(null, "lecm-errands:document", properties);

                                var currentEmployee = orgstructure.getCurrentEmployee();
                                errand.createAssociation(currentEmployee, "lecm-errands:initiator-assoc");

                                <!-- lecmErrandWf:executorAssoc lecm-errands:executor-assoc -->
                                if (typeof lecmErrandWf_executorAssoc != 'undefined' && lecmErrandWf_executorAssoc != null) {
                                    errand.createAssociation(lecmErrandWf_executorAssoc, "lecm-errands:executor-assoc");
                                }

                                <!-- lecmErrandWf:coexecutorsAssoc lecm-errands:coexecutors-assoc -->
                                if (typeof lecmErrandWf_coexecutorsAssoc != 'undefined' && lecmErrandWf_coexecutorsAssoc != null) {
                                    for each (var assocObj in lecmErrandWf_coexecutorsAssoc.toArray()) {
	                                   errand.createAssociation(assocObj, "lecm-errands:coexecutors-assoc");
    	                            }
                                }

                                <!-- lecmErrandWf:controllerAssoc lecm-errands:controller-assoc -->
                                if (typeof lecmErrandWf_controllerAssoc != 'undefined' && lecmErrandWf_controllerAssoc != null) {
                                    errand.createAssociation(lecmErrandWf_controllerAssoc, "lecm-errands:controller-assoc");
                                }

                                <!-- lecm-errands:additional-document-assoc -->
                                errand.createAssociation(doc, "lecm-errands:additional-document-assoc");
	                        }
	                        ]]>
                        </activiti:string>
                    </activiti:field>
                </activiti:executionListener>
            </extensionElements>
            <script></script>
        </scriptTask>
        <receiveTask id="createErrandsReceiveTask" name="Receive Task"></receiveTask>
        <sequenceFlow id="flow1" name="" sourceRef="startCreateErrands" targetRef="createErrandsReceiveTask"></sequenceFlow>
        <sequenceFlow id="flow2" name="" sourceRef="createErrandsReceiveTask" targetRef="createErrandsTask"></sequenceFlow>
        <sequenceFlow id="flow3" name="" sourceRef="createErrandsTask" targetRef="endCreateErrands"></sequenceFlow>
    </process>
</definitions>