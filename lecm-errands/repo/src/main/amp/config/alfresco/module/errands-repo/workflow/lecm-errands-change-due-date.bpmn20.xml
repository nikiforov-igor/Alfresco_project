<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.it.ru/logicECM/errands/workflow/changeDueDate/1.0">
	<process id="errandsChangeDueDate" name="Изменить срок поручения">
        <startEvent id="startChangeDueDate" name="Start" activiti:formKey="lecmErrandWf:changeDueDate"></startEvent>
        <endEvent id="endChangeDueDate" name="End"></endEvent>
        <scriptTask id="changeDueDate" name="Change Due Date" scriptFormat="javascript">
            <extensionElements>
                <activiti:executionListener event="start" class="org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener">
                    <activiti:field name="script">
                        <activiti:string><![CDATA[
                            var document = bpm_package.children[0];
                            var currentUser =  orgstructure.getCurrentEmployee();
	                        if (document) {
	                            var changed = true;
                                var logObjects = [];
                                var logText;
                                var dueDateString = "";
                                var limitless = false;
                                var shiftSize = 0;
                                var newLimitationDate = null;
                                var oldLimitDate = document.properties["lecm-errands:limitation-date"];
								var oldLimitRadio = document.properties["lecm-errands:limitation-date-radio"];
                                var newLimitationDate;

                                if (lecmErrandWf_changeDueDateNewDueDateRadio == "DATE"){
                                    if (oldLimitDate && oldLimitRadio != "LIMITLESS" ){
                                       var oldDate = new Date(oldLimitDate);
                                       shiftSize = jsLimitDate - oldDate;
                                       newLimitationDate = new Date(oldDate.getTime() + shiftSize);
                                       document.properties["lecm-errands:limitation-date"] = new Date(oldDate.getTime() + shiftSize);
                                    } else if( oldLimitRadio == "LIMITLESS" || !oldLimitDate){
                                       newLimitationDate = new Date(lecmErrandWf_changeDueDateNewDueDate);
                                       document.properties["lecm-errands:limitation-date"] = lecmErrandWf_changeDueDateNewDueDate;
                                    }
                                    var dateFormat = new Packages.java.text.SimpleDateFormat("dd.MM.yyyy");
                                    var dueDateString = dateFormat.format(newLimitationDate).toString();
                                    var wfeDate = new Date(document.properties["lecm-errands:wait-for-execution-date"]);
                                    var fromWFELimitDays = Math.round((newLimitationDate - wfeDate) / (1000 * 60 * 60 * 24));
                                    var halfLimitDays = Math.round(fromWFELimitDays/2);
                                    wfeDate.setDate(wfeDate.getDate()+ halfLimitDays);
                                    document.properties["lecm-errands:half-limit-date"] = wfeDate;
                                    var shortLimitDays = notifications.getSettingsShortLimitDays();
                                    if (fromWFELimitDays <= shortLimitDays){
                                       document.properties["lecm-errands:is-limit-short"] = true;
                                    }else{
                                       document.properties["lecm-errands:is-limit-short"] = false;
                                      }

                                    document.properties["lecm-errands:limitation-date-radio"] = lecmErrandWf_changeDueDateNewDueDateRadio;
                                }else if (lecmErrandWf_changeDueDateNewDueDateRadio == "LIMITLESS"){
                                    limitless = true;
                                    if (oldLimitDate && oldLimitRadio != "LIMITLESS" ){
                                        document.properties["lecm-errands:limitation-date-radio"] = lecmErrandWf_changeDueDateNewDueDateRadio;
                                        document.properties["lecm-errands:limitation-date"] = null;
                                        document.properties["lecm-errands:is-limit-short"] = false;
                                        document.properties["lecm-errands:half-limit-date"] = null;
                                        dueDateString = "Без срока";
                                    } else if( oldLimitRadio == "LIMITLESS" || !oldLimitDate){
                                        changed = false;
                                    }
                                }
                                if (lecmErrandWf_changeChildDueDate){
                                          var children = [];
                                          var childrenErrands = errands.getChildErrands(doc.nodeRef.toString());
                                          var childrenResolutions = documentConnection.getConnectedDocuments(doc,'onBasis',"lecm-resolutions:document");

                                          if(childrenErrands || childrenResolutions){
                                             if(childrenErrands){
                                                 children = childrenErrands;
                                             }
                                             if(childrenResolutions){
                                               children = childrenResolutions;
                                             }
                                             if(childrenErrands && childrenResolutions){
                                               children = childrenErrands.concat(childrenResolutions);
                                             }
                                          }
                                          children.forEach(function(child){
                                             if (!child.hasAspect("lecm-errands-aspect:changeDueDateSignal")) {
                                                child.addAspect("lecm-errands-aspect:changeDueDateSignal");
                                             }
                                             child.properties["lecm-errands-aspect:duedate-shift-size"] = shiftSize;
								             child.properties["lecm-errands-aspect:duedate-limitless"] = limitless;
								             child.properties["lecm-errands-aspect:new-limitation-date"] = newLimitationDate;
								             child.properties["lecm-errands-aspect:change-duedate-reason"] = lecmErrandWf_changeDueDateReason;
								             child.save();
                                          });
                                }
                                if(changed){
                                    document.properties["lecm-errands:limitation-date-text"] = dueDateString;
                                    document.save();
                                    var recipients = [];
                                    var executorAssoc = document.assocs["lecm-errands:executor-assoc"];
                                    var coexecutorsAssoc = document.assocs["lecm-errands:coexecutors-assoc"];
                                    var controllerAssoc = document.assocs["lecm-errands:controller-assoc"];
                                    if (executorAssoc && executorAssoc.length == 1) {
                                        recipients.push(executorAssoc[0]);
                                    }
                                    if (coexecutorsAssoc && coexecutorsAssoc.length) {
                                        for(i = 0; i < coexecutorsAssoc.length; i++){
                                            recipients.push(coexecutorsAssoc[i]);
                                        }
                                    }
                                    if (controllerAssoc != null && controllerAssoc.length == 1) {
                                        recipients.push(controllerAssoc[0]);
                                    }
                                    notifications.sendNotificationFromCurrentUser({
                                       recipients: recipients,
                                       templateCode: 'ERRANDS_CHANGE_DUE_DATE',
                                       templateConfig: {
                                           mainObject: document,
                                           eventExecutor: currentUser,
                                           dueDate: dueDateString,
                                           reason: lecmErrandWf_changeDueDateReason
                                       }
                                    });
                                    logObjects.push(dueDateString);
                                    logText = "#initiator ";
                                    logText += documentScript.wrapperTitle("изменил", lecmErrandWf_changeDueDateReason);
                                    logText += " срок исполнения поручения #mainobject на  #object1";
			                        businessJournal.log(document.nodeRef.toString(), "ERRAND_CHANGE_DUE_DATE", logText, logObjects);
                                }
	                        }
                   		]]></activiti:string>
                    </activiti:field>
                </activiti:executionListener>
            </extensionElements>
            <script></script>
        </scriptTask>
        <receiveTask id="errandReceiveTask" name="Receive Task"></receiveTask>
        <sequenceFlow id="flow1" name="" sourceRef="startChangeDueDate" targetRef="changeDueDate"></sequenceFlow>
        <sequenceFlow id="flow2" name="" sourceRef="changeDueDate" targetRef="errandReceiveTask"></sequenceFlow>
        <sequenceFlow id="flow3" name="" sourceRef="errandReceiveTask" targetRef="endChangeDueDate"></sequenceFlow>
    </process>
</definitions>