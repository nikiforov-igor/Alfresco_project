<?xml version='1.0' encoding='UTF-8'?>
<items updateMode="CreateOrUpdate">
    <item name="cm:Внутренние. Завершить работу" type="lecm-group-actions:script-action">
        <property name="lecm-group-actions:expression">
            <![CDATA[user.currentUser().hasDynamicBusinessRole(doc.getNodeRef(), "BR_INITIATOR") OR user.currentUser().hasDynamicBusinessRole(doc.getNodeRef(), "DA_REGISTRAR_DYN") OR user.currentUser().hasDynamicBusinessRole(doc.getNodeRef(), "DA_RECIPIENT_DYN")]]></property>
        <property name="cm:name"><![CDATA[Внутренние. Завершить работу]]></property>
        <property name="lecm-group-actions:statuses"><![CDATA[Направлен]]></property>
        <property name="lecm-group-actions:isGroup"><![CDATA[false]]></property>
        <property name="lecm-group-actions:forCollection"><![CDATA[false]]></property>
        <property name="lecm-group-actions:script"><![CDATA[(function(){

    var reviewTable = document.assocs['lecm-review-ts:review-table-assoc'][0],
        reviewTsItems = reviewTable.getChildAssocsByType('lecm-review-ts:review-table-item'),
        currentEmployee = orgstructure.getCurrentEmployee(),
        recipients = [],
        reviewers = [],
        members = [],
        units = [],
        i;

    for (i in reviewTsItems) {
        var item = reviewTsItems[i],
            state = '' + item.properties['lecm-review-ts:review-state'];
        if ('NOT_REVIEWED' == state) {
            reviewers.push(item.assocs['lecm-review-ts:reviewer-assoc'][0]);
            item.properties['lecm-review-ts:review-state'] = 'CANCELLED';
	        item.properties['lecm-review-ts:review-finish-date'] = new Date();
		    item.save();
        }
    }
    if (reviewers && reviewers.length) {
		notifications.sendNotificationFromCurrentUser({
			recipients: reviewers,
			templateCode: 'REVIEW_CANCELED_ALL',
			templateConfig: {
				mainObject: document,
				initiator: currentEmployee
			}
		});
	}

    var author = document.assocs["lecm-document:author-assoc"][0];
    var primaryUnit = orgstructure.getPrimaryOrgUnit(author);
	if (primaryUnit) {
        units.push(primaryUnit);
    }

    recipients = document.assocs["lecm-eds-document:recipients-assoc"];
    var notificationRecipients = [];
    if (recipients && recipients.length) {
        var additionalUnits = [];
        for each (var recipient in recipients) {
            var unit = orgstructure.getPrimaryOrgUnit(recipient);
            units.push(unit);
        }
        recipients.forEach(function (recipient) {
            if (recipient.typeShort == "lecm-orgstr:employee") {
                notificationRecipients.push(recipient);
                members.push(recipient);
            } else if (recipient.typeShort == "lecm-orgstr:organization-unit") {
                var boss = orgstructure.findUnitBoss(recipient.nodeRef.toString());
                if (boss) {
                    notificationRecipients.push(boss);
                    members.push(boss);
                }
            }
        });
    }

    /* Выставляем права на ответы */
    var answersTable = document.assocs["lecm-internal-table-structure:answers-assoc"][0];
    var answers = answersTable.getChildren();

    try {
        lecmPermission.pushAuthentication();
        lecmPermission.setRunAsUserSystem();
        for each (var answer in answers) {
            var employee = answer.assocs["lecm-internal-table-structure:employee-assoc"][0];
            var unit = orgstructure.getPrimaryOrgUnit(employee);

            if (primaryUnit) {
                var initiatorAuthority = orgstructure.getOrgstructureUnitAuthority(primaryUnit, false); 
                answer.setPermission("LECM_BASIC_PG_Reader", initiatorAuthority);
            }
            if (unit) {
                var recipientAuthority = orgstructure.getOrgstructureUnitAuthority(unit, false);
                answer.setPermission("LECM_BASIC_PG_Reader", recipientAuthority);
            }
        }
    } finally {
        lecmPermission.popAuthentication();
    }

    var signerAssocs = document.assocs["lecm-signing-v2-aspects:signerEmployeeAssoc"];
    if (signerAssocs && signerAssocs.length) {
        for each(var assoc in signerAssocs) {
            notificationRecipients.push(assoc);
            members.push(assoc);
        }
    }
    var registratorAssocs = document.assocs["lecm-document-aspects:registrator-assoc"];
    if (registratorAssocs && registratorAssocs.length) {
        for each(var assoc in registratorAssocs) {
            notificationRecipients.push(assoc);
            members.push(assoc);
        }
    }
    var executorAssocs = document.assocs["lecm-eds-document:executor-assoc"];
    if (executorAssocs && executorAssocs.length) {
        for each(var assoc in registratorAssocs) {
            notificationRecipients.push(assoc);
        }
    }
    for each (var member in members) {
        documentMembers.addMemberWithoutCheckPermission(document, member, true);
    }
    notifications.sendNotificationFromCurrentUser({
        recipients: notificationRecipients,
        templateCode: 'INTERNAL_WORK_COMPLETED',
        templateConfig: {
            mainObject: document,
            initiator: currentEmployee,
            reason: completionReason
        },
        dontCheckAccessToObject: true
    });

    var reason;
    var childErrands = errands.getChildErrands(document.nodeRef.toString());
    if (childErrands && childErrands.length) {
        reason = 'Поручение автоматически закрыто в связи с завершением работы по документу ' + document.properties["lecm-document:present-string"] + ' пользователем ' + currentEmployee.properties["lecm-orgstr:employee-short-name"];
        for each (var childErrand in childErrands) {
            errands.sendCancelSignal(childErrand.nodeRef.toString(), reason, currentEmployee.nodeRef.toString());
        }
    }
    var childResolutions = errands.getChildResolutions(document.nodeRef.toString());
    if (childResolutions && childResolutions.length) {
        reason = 'Резолюция автоматически аннулирована в связи с завершением работы по документу ' + document.properties["lecm-document:present-string"] + ' пользователем ' + currentEmployee.properties["lecm-orgstr:employee-short-name"];
        for each (var childResolution in childResolutions) {
            resolutionsScript.sendAnnulSignal(childResolution.nodeRef.toString(), reason);
        }
    }

    operativeStorage.moveToNomenclatureCase(document, units);

    var logText = "#initiator " + documentScript.wrapperTitle("завершил", completionReason) + " работу по документу " + documentScript.wrapperDocumentLink(document, "{lecm-document:present-string}");
    businessJournal.log(document.nodeRef.toString(), "EXECUTE_DOCUMENT", substitude.formatNodeTitle(document.nodeRef.toString(), logText), []);

    document.properties["lecm-eds-aspect:change-status-to"] = "Закрыт"
    document.save();
})();]]></property>
        <property name="lecm-group-actions:order"><![CDATA[0]]></property>
        <property name="cm:title"><![CDATA[Завершить работу]]></property>
        <property name="lecm-group-actions:type"><![CDATA[[lecm-internal:document]]]></property>
        <property name="lecm-group-actions:availableForReader"><![CDATA[false]]></property>
        <items>
            <item name="cm:Причина" type="lecm-group-actions:form-field">
                <property name="lecm-group-actions:field-control">
                    <![CDATA[{
                        "template":"/ru/it/lecm/base-share/components/controls/textarea.ftl",
                        "id":"d:text-textarea",
                        "params":[
                            {"name":"rows","value":"7"}
                        ]
                    }]]></property>
                <property name="lecm-group-actions:field-is-mandatory"><![CDATA[true]]></property>
                <property name="lecm-group-actions:field-type"><![CDATA[d:text]]></property>
                <property name="cm:name"><![CDATA[Причина]]></property>
                <property name="lecm-group-actions:field-id"><![CDATA[completionReason]]></property>
                <property name="lecm-group-actions:field-priority"><![CDATA[0]]></property>
                <property name="lecm-group-actions:field-default-value"><![CDATA[]]></property>
            </item>
        </items>
    </item>
</items>