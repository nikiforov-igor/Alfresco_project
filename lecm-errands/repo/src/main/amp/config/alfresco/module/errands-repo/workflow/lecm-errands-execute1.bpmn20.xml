<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.it.ru/logicECM/errands/workflow/execute_1/1.0">
    <process id="errandsExecute_1" name="Исполнить поручение(1)">
        <startEvent id="startExecute" name="Start" activiti:formKey="lecmErrandWf:execute_1"></startEvent>
        <endEvent id="endExecute" name="End"></endEvent>
        <scriptTask id="executeErrand" name="Errand execute" scriptFormat="javascript">
            <extensionElements>
                <activiti:executionListener event="start" class="org.alfresco.repo.workflow.activiti.listener.ScriptExecutionListener">
                    <activiti:field name="script">
                        <activiti:string><![CDATA[
                            var document = bpm_package.children[0];
                            var currentUser = orgstructure.getCurrentEmployee();
                            if (document) {
                                var report_required  = document.properties["lecm-errands:report-required"];
                                if(report_required){
                                var table = document.assocs["lecm-errands-ts:execution-reports-assoc"][0];
								if (table) {
								    var report = null;
								    var reportRef = document.properties["lecm-errands:project-report-ref"];
								    if (reportRef) {
								        report = utils.getNodeFromString(reportRef);
								    }
                                    if (!report) {
                                        report = table.createNode(null, "lecm-errands-ts:execution-report", []);
                                        document.properties["lecm-errands:project-report-ref"] = report.nodeRef.toString();
                                    }
                                    var reportText = execution.getVariable("lecmErrandWf_execute_1ReportText");
                                    var report_required  = document.properties["lecm-errands:report-required"];
                                    var isExecute = lecmErrandWf_execute_1Execute;
                                    var closeChild = lecmErrandWf_execute_1CloseChild;

                                    report.properties["lecm-errands-ts:execution-report-text"] = reportText;
                                    report.save();

                                    var attachments = [];
                                    var attachmentsList = execution.getVariable("lecmErrandWf_execute_1Attachment")
                                    if (attachmentsList && attachmentsList.size()) {
                                        for (var i = 0; i < attachmentsList.size(); i++){
                                            attachments.push(attachmentsList.get(i));
                                        }
                                    }
                                    var reportAttachments = report.assocs["lecm-errands-ts:execution-report-attachment-assoc"];
                                    var totalNewAttachments = [];
                                    var totalRemovedAttachments = [];

                                    if (attachments) {
                                        if (reportAttachments && reportAttachments.length) {
                                            totalNewAttachments = attachments.filter(function(attachment){
                                                for (var i = 0; i < reportAttachments.length; i++) {
                                                    if (attachment.nodeRef.equals(reportAttachments[i].nodeRef)) {
                                                        return false;
                                                    }
                                                }
                                                return true;
                                            });
                                            totalRemovedAttachments = reportAttachments.filter(function(attachment){
                                                for (var i = 0; i < attachments.length; i++) {
                                                    if (attachment.nodeRef.equals(attachments[i].nodeRef)) {
                                                        return false;
                                                    }
                                                }
                                                return true;
                                            });
                                        } else {
                                            totalNewAttachments = attachments;
                                        }
                                    } else {
                                        if (reportAttachments && reportAttachments.length) {
                                            totalRemovedAttachments = reportAttachments;
                                        }
                                    }
                                    totalNewAttachments.forEach(function(attachment){
                                        report.createAssociation(attachment, "lecm-errands-ts:execution-report-attachment-assoc");
                                    });
                                    totalRemovedAttachments.forEach(function(attachment){
                                        report.removeAssociation(attachment, "lecm-errands-ts:execution-report-attachment-assoc");
                                    });

                                    var connectedDocuments = [];
                                    var connectedDocumentsList = execution.getVariable("lecmErrandWf_execute_1ConnectedDocument")
                                    if (connectedDocumentsList && connectedDocumentsList.size()) {
                                        for (var i = 0; i < connectedDocumentsList.size(); i++){
                                            connectedDocuments.push(connectedDocumentsList.get(i));
                                        }
                                    }
                                    var reportConnectedDocs = report.assocs["lecm-errands-ts:execution-report-connected-document-assoc"];
                                    var totalNewConnectedDocs = [];
                                    var totalRemovedConnectedDocs = [];
                                    if (connectedDocuments) {
                                        if (reportConnectedDocs && reportConnectedDocs.length) {
                                            totalNewConnectedDocs = connectedDocuments.filter(function(doc){
                                                for (var i = 0; i < reportConnectedDocs.length; i++) {
                                                    if (doc.nodeRef.equals(reportConnectedDocs[i].nodeRef)) {
                                                        return false;
                                                    }
                                                }
                                                return true;
                                            });
                                            totalRemovedConnectedDocs = reportConnectedDocs.filter(function(doc){
                                                for (var i = 0; i < connectedDocuments.length; i++) {
                                                    if (doc.nodeRef.equals(connectedDocuments[i].nodeRef)) {
                                                        return false;
                                                    }
                                                }
                                                return true;
                                            });
                                        } else {
                                            totalNewConnectedDocs = connectedDocuments;
                                        }
                                    } else {
                                        if (reportConnectedDocs && reportConnectedDocs.length) {
                                            totalRemovedConnectedDocs = reportConnectedDocs;
                                        }
                                    }
                                    totalNewConnectedDocs.forEach(function(doc){
                                        report.createAssociation(doc, "lecm-errands-ts:execution-report-connected-document-assoc");
                                    });
                                    totalRemovedConnectedDocs.forEach(function(doc){
                                        report.removeAssociation(doc, "lecm-errands-ts:execution-report-connected-document-assoc");
                                    });

                                    if (!isExecute) {
                                        report.properties["lecm-errands-ts:execution-report-status"] = "PROJECT";
                                        document.properties["lecm-errands:project-report-text"] = reportText;
                                        document.properties["lecm-errands:project-report-attachment"] = attachments.map(function(a){
                                            return a.nodeRef.toString();
                                        }).join();
                                        document.properties["lecm-errands:project-report-connections"] = connectedDocuments.map(function(a){
                                            return a.nodeRef.toString();
                                        }).join();
                                    } else {
                                        var recipients = [];
                                        var notificationTemplate = null;
                                        var author = null;
                                        var authorAssoc = document.assocs["lecm-errands:initiator-assoc"];
                                        if (authorAssoc && authorAssoc.length == 1) {
                                            author = authorAssoc[0];
                                        }
                                        var controller = null;
                                        var controllerAssoc = document.assocs["lecm-errands:controller-assoc"];
                                        if (controllerAssoc && controllerAssoc.length == 1) {
                                            controller = controllerAssoc[0];
                                        }
                                        if (closeChild) {
                                            var reason = "Завершено исполнением поручения-основания ";
                                            reason += documentScript.wrapperDocumentLink(document, '{lecm-document:present-string}');
                                            var childrenErrands = errands.getChildErrands(document.nodeRef.toString());
                                            var childrenResolutions = errands.getChildResolutions(document.nodeRef.toString());
                                            childrenErrands.forEach(function (childErrand) {
                                                if (!statemachine.isFinal(childErrand.nodeRef.toString()) && !statemachine.isDraft(childErrand)) {
                                                    childErrand.properties["lecm-errands:cancellation-signal"] = true;
                                                    childErrand.properties["lecm-errands:cancellation-signal-reason"] = reason;
                                                }
                                            });
                                            childrenResolutions.forEach(function (childResolution) {
                                                if (!statemachine.isFinal(childErrand.nodeRef.toString()) && !statemachine.isDraft(childErrand)) {
                                                    childResolution.properties["lecm-resolutions:annul-signal"] = true;
                                                    childResolution.properties["lecm-resolutions:annul-signal-reason"] = reason;
                                                }
                                            });
                                        }
                                        if (!report_required) {
                                            report.properties["lecm-errands-ts:execution-report-status"] = "ACCEPT";
                                            execution.setVariable("executeResult", "executed");
                                            document.properties["lecm-errands:execute-result"] = "executed";
                                            notificationTemplate = "ERRANDS_EXECUTED_WITHOUT_REPORT";
                                            recipients = [author, controller];
                                        } else {
                                            report.properties["lecm-errands-ts:execution-report-status"] = "ONCONTROL";
                                            var report_recipient_type = document.properties["lecm-errands:report-recipient-type"];
                                            notificationTemplate = "ERRANDS_EXECUTED_WITH_REPORT";
                                            if (report_recipient_type == "AUTHOR" && author) {
                                                recipients = [author];
                                            }else if (report_recipient_type == "CONTROLLER" && controller) {
                                                recipients = [controller];
                                            }else if (report_recipient_type == "AUTHOR_AND_CONTROLLER") {
                                                if (author) {
                                                    recipients.push(author);
                                                }
                                                if (controller) {
                                                    recipients.push(controller);
                                                }
                                            }
                                            execution.setVariable("executeResult", "onControl");
                                            document.properties["lecm-errands:execute-result"] = "onControl";
                                        }
                                        notifications.sendNotificationFromCurrentUser({
                                            recipients: recipients,
                                            templateCode: notificationTemplate,
                                            templateConfig: {
                                                mainObject: document,
                                                eventExecutor: currentUser
                                            }
                                        });
                                        document.properties["lecm-errands:project-report-ref"] = null;
                                        document.properties["lecm-errands:project-report-text"] = null;
                                        document.properties["lecm-errands:project-report-attachment"] = null;
                                        document.properties["lecm-errands:project-report-connections"] = null;
                                    }
                                    report.save();
                                    document.save();
                                }
                            }
                        ]]></activiti:string>
                    </activiti:field>
                </activiti:executionListener>
            </extensionElements>
            <script></script>
        </scriptTask>
        <receiveTask id="errandReceiveTask" name="Receive Task"></receiveTask>
        <sequenceFlow id="flow1" name="" sourceRef="startExecute" targetRef="executeErrand"></sequenceFlow>
        <sequenceFlow id="flow2" name="" sourceRef="executeErrand" targetRef="errandReceiveTask"></sequenceFlow>
        <sequenceFlow id="flow3" name="" sourceRef="errandReceiveTask" targetRef="endExecute"></sequenceFlow>
    </process>
</definitions>
