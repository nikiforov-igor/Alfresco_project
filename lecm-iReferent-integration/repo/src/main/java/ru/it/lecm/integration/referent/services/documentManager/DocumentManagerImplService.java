
package ru.it.lecm.integration.referent.services.documentManager;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 */
@WebServiceClient(name = "DocumentManagerImplService", targetNamespace = "urn:DefaultNamespace", wsdlLocation = "WSBR_DocumentManager.wsdl")
public class DocumentManagerImplService
        extends Service {

    private final static URL DOCUMENTMANAGERIMPLSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(DocumentManagerImplService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = DocumentManagerImplService.class.getResource("");
            url = new URL(baseUrl, "WSBR_DocumentManager.wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'WSBR_DocumentManager.wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        DOCUMENTMANAGERIMPLSERVICE_WSDL_LOCATION = url;
    }

    public DocumentManagerImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DocumentManagerImplService() {
        super(DOCUMENTMANAGERIMPLSERVICE_WSDL_LOCATION, new QName("urn:DefaultNamespace", "DocumentManagerImplService"));
    }

    /**
     * @return returns WSDocumentManager
     */
    @WebEndpoint(name = "DocumentManagerImplPort")
    public WSDocumentManager getDocumentManagerImplPort() {
        return super.getPort(new QName("urn:DefaultNamespace", "DocumentManagerImplPort"), WSDocumentManager.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns WSDocumentManager
     */
    @WebEndpoint(name = "DocumentManagerImplPort")
    public WSDocumentManager getDocumentManagerImplPort(WebServiceFeature... features) {
        return super.getPort(new QName("urn:DefaultNamespace", "DocumentManagerImplPort"), WSDocumentManager.class, features);
    }

}
