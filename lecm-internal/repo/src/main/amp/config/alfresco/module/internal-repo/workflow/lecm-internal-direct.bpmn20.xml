<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema"
             expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.it.ru/logicECM/workflow/internal/direct">

    <process id="lecmInternalDirect" name="Внутренний. Направить" isExecutable="true">
        <startEvent id="start-internal-direct" name="Start Internal Direct" activiti:formKey="internalDirect:direct"></startEvent>
        <serviceTask id="empty-service-task" name="Service task" activiti:class="org.alfresco.repo.workflow.activiti.script.AlfrescoScriptDelegate">
            <extensionElements>
                <activiti:field name="script">
                    <activiti:string><![CDATA[(function () {})();]]></activiti:string>
                </activiti:field>
            </extensionElements>
        </serviceTask>
        <sequenceFlow id="from-start-to-empty-service-task" sourceRef="start-internal-direct" targetRef="empty-service-task"></sequenceFlow>
        <receiveTask id="receivetask" name="Receive Task"></receiveTask>

        <sequenceFlow id="from-empty-service-task-to-receivetask" sourceRef="empty-service-task" targetRef="receivetask"></sequenceFlow>

        <serviceTask id="init-service-task" name="Service task" activiti:class="org.alfresco.repo.workflow.activiti.script.AlfrescoScriptDelegate">
            <extensionElements>
                <activiti:field name="script">
                    <activiti:string><![CDATA[
                        var document = bpm_package.children[0],
                            withSigning = execution.getVariable('withSigning'),
                            assocs,
                            initiator,
                            msg;
                        execution.setVariable("assigneesList", edsDocument.getRecipientLogins(document));
                        if (withSigning && 'true' == ('' + withSigning)) {
                            assocs = document.assocs['lecm-signing-v2-aspects:signerEmployeeAssoc'];
                            initiator = orgstructure.getCurrentEmployee();
                            msg = "#initiator подписал(а) документ " + documentScript.wrapperDocumentLink(document, "{lecm-document:ext-present-string}");
                            businessJournal.log(document.nodeRef.toString(), "SIGNING", substitude.formatNodeTitle(document.nodeRef.toString(), msg), []);
                            document.properties['lecm-signing-v2-aspects:isSigned'] = true;
                            document.properties['lecm-signing-v2-aspects:signingState'] = 'COMPLETE';
                            document.properties['lecm-signing-v2-aspects:signingDate'] = base.getValueConverter().convertValueForJava(new Date());
                            document.save();
                            if (assocs && assocs.length) {
                                document.removeAssociation(assocs[0], 'lecm-signing-v2-aspects:signerEmployeeAssoc');
                            }
                            document.createAssociation(initiator, 'lecm-signing-v2-aspects:signerEmployeeAssoc');
                        }

                    ]]></activiti:string>
                </activiti:field>
            </extensionElements>
        </serviceTask>

        <sequenceFlow id="from-receive-task-to-answer" sourceRef="receivetask" targetRef="init-service-task"></sequenceFlow>

        <userTask id="parallel-answer-task" name="Внутренний. Ответить"
                  activiti:assignee="${assignee}"
                  activiti:formKey="internalDirect:answerTask">
            <extensionElements>
                <activiti:taskListener event="create" class="org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener">
                    <activiti:field name="script">
                        <activiti:string><![CDATA[
                        var document = bpm_package.children[0];
                        var table = document.assocs["lecm-internal-table-structure:answers-assoc"][0];
                        var employee = orgstructure.getEmployeeByLogin(task.getVariable("assignee"));
                        task.setVariableLocal("workflowDynRole", 'DA_RECIPIENT_DYN');
                        var userName = orgstructure.getEmployeeLogin(employee);


                        var businessRole = (("" + edsGlobalSettings.isHidePropsForRecipients()) == "true") ? "LECM_BASIC_PG_ActionPerformer_Lite" : "LECM_BASIC_PG_ActionPerformer"; 
                        documentMembers.addMemberWithoutCheckPermission(document, employee, businessRole, true);

                        var initiator = orgstructure.getCurrentEmployee();
                        var author = document.assocs["lecm-document:author-assoc"][0];
                        var answer = table.createNode(null, "lecm-internal-table-structure:answer", "cm:contains");

                        answer.setInheritsPermissions(false);
                        lecmPermission.grantDynamicRole(answer, employee, "DA_RECIPIENT_DYN", "LECM_BASIC_PG_ActionPerformer");
                        lecmPermission.grantDynamicRole(document, employee, "DA_RECIPIENT_DYN", "LECM_BASIC_PG_Employee");
                        lecmPermission.grantDynamicRole(answer, author, "BR_INITIATOR", "LECM_BASIC_PG_Owner");

                        var signerAssoc = document.assocs['lecm-signing-v2-aspects:signerEmployeeAssoc'];
                        var signer = signerAssoc && signerAssoc.length ? signerAssoc[0] : null;
                        if (signer) {
                            lecmPermission.grantDynamicRole(answer, signer, "LECM_SIGNER_DYN", "LECM_BASIC_PG_Reviewer");
                        }

                        answer.createAssociation(employee, "lecm-internal-table-structure:employee-assoc");
                        /* Подписываемся на слушание */
                        documentEvent.subscribe(answer, document);
                        task.setVariableLocal("answer", answer.nodeRef.toString());
                        task.setVariableLocal("initiatorEmployee", initiator.nodeRef.toString());
                        /* Создаем данные для формы */
                        var formData = [];
                        /* Получатель */
                        formData = "{\"lecm-internal:recipients-assoc\":\"" + document.assocs["lecm-document:author-assoc"][0].nodeRef.toString();
                        if (document.assocs["lecm-eds-document:executor-assoc"] && document.assocs["lecm-eds-document:executor-assoc"].length) {
                            formData += "," + document.assocs["lecm-eds-document:executor-assoc"][0].nodeRef.toString();
                        }
                        formData += "\",";
                        /* Тематика */
                        formData += "\"assoc_lecm-document_subject-assoc\":\"";
                        if (document.assocs["lecm-document:subject-assoc"] && document.assocs["lecm-document:subject-assoc"].length) {
                            for (var i = 0; i < document.assocs["lecm-document:subject-assoc"].length; i++) {
                                var subject = document.assocs["lecm-document:subject-assoc"][i];
                                formData +=  (i > 0 ? "," : "") + subject.nodeRef.toString();
                            }
                        }
                        formData += "\",";
                        /* Связь */
                        formData += "\"lecm-document-aspects:response-to-assoc\":\"" + document.nodeRef.toString() + "\",";
                        /* Инициатора добавляем в участники */
                        formData += "\"assoc_lecm-internal_temp-members-assoc\":\"" + initiator.nodeRef.toString() + "\"}";
                        /* Сохраняем */
                        task.setVariableLocal("internalDirect_formData", formData);

                        var curators = [];
                        curators.push(employee);
					    notifications.sendNotificationFromCurrentUser({
                            recipients: curators,
                            templateCode: 'INTERNAL_DIRECT',
                            templateConfig: {
                                mainObject: document,
                                sender: initiator
                            }
                        });

                        var logObjects = [];
				        logObjects.push("" + employee.nodeRef.toString());
				        var logText = "#initiator направил(а) "
				        + documentScript.wrapperDocumentLink(document, "№ {~REGNUM} от {~REGDATE}")
				        + " сотруднику #object1";

				        businessJournal.log(document.nodeRef.toString(), "DIRECT_DOCUMENT", substitude.formatNodeTitle(document.nodeRef.toString(), logText), logObjects);
                        task.setAssignee(userName);
						]]></activiti:string>
                    </activiti:field>
                </activiti:taskListener>
                <activiti:taskListener event="complete" class="org.alfresco.repo.workflow.activiti.tasklistener.ScriptTaskListener">
                    <activiti:field name="script">
                        <activiti:string><![CDATA[
                            var document = bpm_package.children[0];

							var answerObject = search.findNode(task.getVariableLocal("answer"));
							var curator = search.findNode(task.getVariableLocal("initiatorEmployee"));
							var author = document.assocs["lecm-document:author-assoc"][0];
							var curators = [];
							curators.push(author);
							var currentUser = orgstructure.getCurrentEmployee();
							var newDocumentRef = task.getVariable("lecmWorkflowDocument_createdNodeRef");
							if (newDocumentRef != null && newDocumentRef != "") {
                                var newDocument = search.findNode(newDocumentRef);
                                /* Формируем ответ */
                                answerObject.createAssociation(newDocument, "lecm-internal-table-structure:answer-document-assoc");
                                answerObject.properties["lecm-internal-table-structure:answer-status"] = "true";
                                answerObject.properties["lecm-internal-table-structure:answer-details"] = "Готовится ответ";
                                answerObject.save();
                                /* Добавляем инициатора процесса в участники нового документа */
                                /* documentMembers.addMemberWithoutCheckPermission(newDocument, curator, "LECM_BASIC_PG_Reader"); */
                                /* Добавляем слушателя */
                                documentEvent.subscribe(newDocument, document);

                                var logText = "#initiator создал(а) внутренний документ в ответ на "
				                + documentScript.wrapperDocumentLink(document, "№ {~REGNUM} от {~REGDATE}");

				                businessJournal.log(document.nodeRef.toString(), "EXEC_ACTION", substitude.formatNodeTitle(document.nodeRef.toString(), logText), []);
							} else {
                                var answer = eval('(' + task.getVariable("internalDirect_answerResult") + ')');
                                if (answer.type == "takeNote") {
                                    answerObject.properties["lecm-internal-table-structure:answer-status"] = "true";
                                    answerObject.properties["lecm-internal-table-structure:answer-complete"] = "true";
                                    answerObject.properties["lecm-internal-table-structure:answer-details"] = "Принято к сведению";
                                    answerObject.save();

                                    notifications.sendNotificationFromCurrentUser({
                                        recipients: curators,
                                        templateCode: 'INTERNAL_ACCEPT',
                                        templateConfig: {
                                            mainObject: document,
                                            sender: currentUser
                                        }
                                    });

				                    var logText = "#initiator принял(а) внутренний документ "
				                    + documentScript.wrapperDocumentLink(document, "№ {~REGNUM} от {~REGDATE}") + " к сведению";

				                    businessJournal.log(document.nodeRef.toString(), "EXEC_ACTION", substitude.formatNodeTitle(document.nodeRef.toString(), logText), []);
                                } else if (answer.type == "answer") {
                                    var answerText = "";
                                    /* Обрабатываем типовой ответ */
                                    if (answer.typical != null && answer.typical != "") {
                                        var typical = search.findNode(answer.typical);
                                        answerText = typical.properties["cm:name"];
                                        answerObject.createAssociation(typical, "lecm-internal-table-structure:answer-typical-assoc");
                                    }
                                    /* Обрабатываем комметарий */
                                    if (answer.manual != null && answer.manual != "") {
                                        answerText += (answerText.length > 0 ? ". " : "") + answer.manual;
                                    }
                                    /* Обрабатываем прикремленные файлы */
                                    if (answer.files != null && answer.files != "") {
                                        var files = answer.files.split(",");
                                        for (var i in files) {
                                            var file = search.findNode(files[i]);
                                            document.createAssociation(file, "lecm-document-aspects:attachments-temp-assoc");
                                            answerObject.createAssociation(file, "lecm-internal-table-structure:answer-attachment-assoc");
                                        }
                                    }
                                    answerObject.properties["lecm-internal-table-structure:answer-status"] = "true";
                                    answerObject.properties["lecm-internal-table-structure:answer-complete"] = "true";
                                    answerObject.properties["lecm-internal-table-structure:answer-details-clean"] = answerText;
                                    answerObject.properties["lecm-internal-table-structure:answer-details"] = "!html " + documentScript.wrapperAttribute(answerObject, answerText);
                                    answerObject.save();

                                    notifications.sendNotificationFromCurrentUser({
                                        recipients: curators,
                                        templateCode: 'INTERNAL_ANSWER',
                                        templateConfig: {
                                            mainObject: document,
                                            sender: currentUser
                                        }
                                    });

                                    var logText = "#initiator создал(а) ответ-комментарий к документу "
				                    + documentScript.wrapperDocumentLink(document, "№ {~REGNUM} от {~REGDATE}");

				                    businessJournal.log(document.nodeRef.toString(), "EXEC_ACTION", substitude.formatNodeTitle(document.nodeRef.toString(), logText), []);
                                }
                            }
						]]></activiti:string>
                    </activiti:field>
                </activiti:taskListener>
            </extensionElements>
            <multiInstanceLoopCharacteristics isSequential="false" activiti:collection="${assigneesList}" activiti:elementVariable="assignee"></multiInstanceLoopCharacteristics>
        </userTask>
        <sequenceFlow id="from-init-task-to-answer" sourceRef="init-service-task" targetRef="parallel-answer-task"></sequenceFlow>
        <sequenceFlow id="from-log-final-decision-to-workflowEnd" sourceRef="parallel-answer-task" targetRef="workflowEnd"></sequenceFlow>

        <endEvent id="workflowEnd" name="End"></endEvent>

    </process>
</definitions>
